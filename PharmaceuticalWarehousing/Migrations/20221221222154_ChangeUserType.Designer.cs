// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PharmaceuticalWarehousing;

#nullable disable

namespace PharmaceuticalWarehousing.Migrations
{
    [DbContext(typeof(PharmaceuticalWarehousingDbContext))]
    [Migration("20221221222154_ChangeUserType")]
    partial class ChangeUserType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.AccessRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Edit")
                        .HasColumnType("boolean");

                    b.Property<int>("Form")
                        .HasColumnType("integer");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Write")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccessRight");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Counterparty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Flat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ITN")
                        .HasColumnType("integer");

                    b.Property<int?>("PaymentAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentAccountId");

                    b.ToTable("Counterparties");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountPayable")
                        .HasColumnType("double precision");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfDischarge")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SalesmanId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BestBeforeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CheckId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfManufacture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("integer");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<int>("RegistrationNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("StatementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CheckId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("StatementId");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MedicationsId")
                        .HasColumnType("integer");

                    b.Property<int?>("PackageTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MedicationsId");

                    b.HasIndex("PackageTypeId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.PackageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PackageTypes");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.PaymentAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("BankId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("PaymentAccounts");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Salesman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Salesmans");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("WaybillId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WaybillId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Waybill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Waybills");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.AccessRight", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.User", "User")
                        .WithMany("AccessRights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Check", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.Invoice", "Invoice")
                        .WithMany("Checks")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Counterparty", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.PaymentAccount", "PaymentAccount")
                        .WithMany("Counterparties")
                        .HasForeignKey("PaymentAccountId");

                    b.Navigation("PaymentAccount");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Invoice", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.Counterparty", "Buyer")
                        .WithMany("Invoices")
                        .HasForeignKey("BuyerId");

                    b.HasOne("PharmaceuticalWarehousing.Models.Salesman", "Salesman")
                        .WithMany("Invoices")
                        .HasForeignKey("SalesmanId");

                    b.Navigation("Buyer");

                    b.Navigation("Salesman");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Medication", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.Check", "Check")
                        .WithMany("Medications")
                        .HasForeignKey("CheckId");

                    b.HasOne("PharmaceuticalWarehousing.Models.Manufacturer", "Manufacturer")
                        .WithMany("Medications")
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("PharmaceuticalWarehousing.Models.Medicine", "Medicine")
                        .WithMany("Medications")
                        .HasForeignKey("MedicineId");

                    b.HasOne("PharmaceuticalWarehousing.Models.Statement", "Statement")
                        .WithMany("Medications")
                        .HasForeignKey("StatementId");

                    b.Navigation("Check");

                    b.Navigation("Manufacturer");

                    b.Navigation("Medicine");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Medicine", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.Category", "Category")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Package", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.Medication", "Medications")
                        .WithMany("Packaging")
                        .HasForeignKey("MedicationsId");

                    b.HasOne("PharmaceuticalWarehousing.Models.PackageType", "PackageType")
                        .WithMany("packaging")
                        .HasForeignKey("PackageTypeId");

                    b.Navigation("Medications");

                    b.Navigation("PackageType");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.PaymentAccount", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.Bank", "Bank")
                        .WithMany("PaymentAccounts")
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Statement", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.Waybill", "Waybill")
                        .WithMany("Statements")
                        .HasForeignKey("WaybillId");

                    b.Navigation("Waybill");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Waybill", b =>
                {
                    b.HasOne("PharmaceuticalWarehousing.Models.Counterparty", "Provider")
                        .WithMany("Waybills")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Bank", b =>
                {
                    b.Navigation("PaymentAccounts");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Category", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Check", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Counterparty", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Waybills");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Invoice", b =>
                {
                    b.Navigation("Checks");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Manufacturer", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Medication", b =>
                {
                    b.Navigation("Packaging");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Medicine", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.PackageType", b =>
                {
                    b.Navigation("packaging");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.PaymentAccount", b =>
                {
                    b.Navigation("Counterparties");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Salesman", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Statement", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.User", b =>
                {
                    b.Navigation("AccessRights");
                });

            modelBuilder.Entity("PharmaceuticalWarehousing.Models.Waybill", b =>
                {
                    b.Navigation("Statements");
                });
#pragma warning restore 612, 618
        }
    }
}
